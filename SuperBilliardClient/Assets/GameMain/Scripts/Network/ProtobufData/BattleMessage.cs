// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: BattleMessage.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GameMessage {

  /// <summary>Holder for reflection information generated from BattleMessage.proto</summary>
  public static partial class BattleMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for BattleMessage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BattleMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNCYXR0bGVNZXNzYWdlLnByb3RvEgtHYW1lTWVzc2FnZSIuCgtWZWN0b3Iz",
            "TWVzcxIJCgF4GAEgASgCEgkKAXkYAiABKAISCQoBehgDIAEoAiJ1CgtCYWxs",
            "TWVzc2FnZRIOCgZiYWxsSWQYASABKAUSKgoIcG9zaXRpb24YAiABKAsyGC5H",
            "YW1lTWVzc2FnZS5WZWN0b3IzTWVzcxIqCghyb3RhdGlvbhgDIAEoCzIYLkdh",
            "bWVNZXNzYWdlLlZlY3RvcjNNZXNzIkcKCUNTQ3VlU3luYxIqCghwb3NpdGlv",
            "bhgBIAEoCzIYLkdhbWVNZXNzYWdlLlZlY3RvcjNNZXNzEg4KBmFuZ2x0WRgC",
            "IAEoAiJHCglTQ0N1ZVN5bmMSKgoIcG9zaXRpb24YASABKAsyGC5HYW1lTWVz",
            "c2FnZS5WZWN0b3IzTWVzcxIOCgZhbmdsdFkYAiABKAIiUwoQU0NDdWVTdG9y",
            "YWdlU3luYxISCgpmaWxsQW1vdW50GAEgASgCEg0KBWRpcl94GAIgASgCEg0K",
            "BWRpcl95GAMgASgCEg0KBWRpcl96GAQgASgCIlMKEENTQ3VlU3RvcmFnZVN5",
            "bmMSEgoKZmlsbEFtb3VudBgBIAEoAhINCgVkaXJfeBgCIAEoAhINCgVkaXJf",
            "eRgDIAEoAhINCgVkaXJfehgEIAEoAiJACg5DU0JpbGxpYXJkU3luYxIuCgxi",
            "YWxsTWVzc2FnZXMYASADKAsyGC5HYW1lTWVzc2FnZS5CYWxsTWVzc2FnZSJA",
            "Cg5TQ0JpbGxpYXJkU3luYxIuCgxiYWxsTWVzc2FnZXMYASADKAsyGC5HYW1l",
            "TWVzc2FnZS5CYWxsTWVzc2FnZSJKChVTQ0JpbGxpYXJkVHlwZUNvbmZpcm0S",
            "MQoOc2NCaWxsaWFyZFR5cGUYASABKA4yGS5HYW1lTWVzc2FnZS5CaWxsaWFy",
            "ZFR5cGUiSgoVQ1NCaWxsaWFyZFR5cGVDb25maXJtEjEKDmNzQmlsbGlhcmRU",
            "eXBlGAEgASgOMhkuR2FtZU1lc3NhZ2UuQmlsbGlhcmRUeXBlIjAKDkNTVHVy",
            "bkFuYWx5c2lzEh4KFmZyaXN0Q29sbGlkZUJJbGxpYXJkSWQYASABKAUiMAoO",
            "U0NUdXJuQW5hbHlzaXMSHgoWZnJpc3RDb2xsaWRlQklsbGlhcmRJZBgBIAEo",
            "BSIbCglDU0VuZFR1cm4SDgoGaXNmb3VsGAEgASgIIiQKC1NDU3RhcnRUdXJu",
            "EhUKDWlzX3BsYWNld2hpdGUYASABKAgiEAoOQ1NFeGl0R2FtZVJvb20iTwoS",
            "Q1NTZXRCaWxsaWFyZFN0YXRlEhIKCmJpbGxpYXJkSWQYASABKAUSDgoGYWN0",
            "aXZlGAIgASgIEhUKDXBoeXNpY3NJc09wZW4YAyABKAgiTwoSU0NTZXRCaWxs",
            "aWFyZFN0YXRlEhIKCmJpbGxpYXJkSWQYASABKAUSDgoGYWN0aXZlGAIgASgI",
            "EhUKDXBoeXNpY3NJc09wZW4YAyABKAgiWgoLQ1NTeW5jU291bmQSDwoHc291",
            "bmRJZBgBIAEoBRIOCgZ2b2x1bW4YAiABKAISKgoIcG9zaXRpb24YAyABKAsy",
            "GC5HYW1lTWVzc2FnZS5WZWN0b3IzTWVzcyJaCgtTQ1N5bmNTb3VuZBIPCgdz",
            "b3VuZElkGAEgASgFEg4KBnZvbHVtbhgCIAEoAhIqCghwb3NpdGlvbhgDIAEo",
            "CzIYLkdhbWVNZXNzYWdlLlZlY3RvcjNNZXNzIkgKEkNTQmF0dGxlRW1wdHlF",
            "dmVudBIyCgtiYXR0bGVFdmVudBgBIAEoDjIdLkdhbWVNZXNzYWdlLkJhdHRs",
            "ZUVtcHR5RXZlbnQiSAoSU0NCYXR0bGVFbXB0eUV2ZW50EjIKC2JhdHRsZUV2",
            "ZW50GAEgASgOMh0uR2FtZU1lc3NhZ2UuQmF0dGxlRW1wdHlFdmVudCowCgxC",
            "aWxsaWFyZFR5cGUSCAoETm9uZRAAEgoKBlNpbmdsZRABEgoKBkRvdWJsZRAC",
            "KjUKEEJhdHRsZUVtcHR5RXZlbnQSDgoKQmF0dGxlTm9uZRAAEhEKDVN0b3BU",
            "aW1lQ291bnQQAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::GameMessage.BilliardType), typeof(global::GameMessage.BattleEmptyEvent), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.Vector3Mess), global::GameMessage.Vector3Mess.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.BallMessage), global::GameMessage.BallMessage.Parser, new[]{ "BallId", "Position", "Rotation" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.CSCueSync), global::GameMessage.CSCueSync.Parser, new[]{ "Position", "AngltY" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.SCCueSync), global::GameMessage.SCCueSync.Parser, new[]{ "Position", "AngltY" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.SCCueStorageSync), global::GameMessage.SCCueStorageSync.Parser, new[]{ "FillAmount", "DirX", "DirY", "DirZ" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.CSCueStorageSync), global::GameMessage.CSCueStorageSync.Parser, new[]{ "FillAmount", "DirX", "DirY", "DirZ" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.CSBilliardSync), global::GameMessage.CSBilliardSync.Parser, new[]{ "BallMessages" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.SCBilliardSync), global::GameMessage.SCBilliardSync.Parser, new[]{ "BallMessages" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.SCBilliardTypeConfirm), global::GameMessage.SCBilliardTypeConfirm.Parser, new[]{ "ScBilliardType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.CSBilliardTypeConfirm), global::GameMessage.CSBilliardTypeConfirm.Parser, new[]{ "CsBilliardType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.CSTurnAnalysis), global::GameMessage.CSTurnAnalysis.Parser, new[]{ "FristCollideBIlliardId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.SCTurnAnalysis), global::GameMessage.SCTurnAnalysis.Parser, new[]{ "FristCollideBIlliardId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.CSEndTurn), global::GameMessage.CSEndTurn.Parser, new[]{ "Isfoul" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.SCStartTurn), global::GameMessage.SCStartTurn.Parser, new[]{ "IsPlacewhite" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.CSExitGameRoom), global::GameMessage.CSExitGameRoom.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.CSSetBilliardState), global::GameMessage.CSSetBilliardState.Parser, new[]{ "BilliardId", "Active", "PhysicsIsOpen" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.SCSetBilliardState), global::GameMessage.SCSetBilliardState.Parser, new[]{ "BilliardId", "Active", "PhysicsIsOpen" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.CSSyncSound), global::GameMessage.CSSyncSound.Parser, new[]{ "SoundId", "Volumn", "Position" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.SCSyncSound), global::GameMessage.SCSyncSound.Parser, new[]{ "SoundId", "Volumn", "Position" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.CSBattleEmptyEvent), global::GameMessage.CSBattleEmptyEvent.Parser, new[]{ "BattleEvent" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.SCBattleEmptyEvent), global::GameMessage.SCBattleEmptyEvent.Parser, new[]{ "BattleEvent" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum BilliardType {
    [pbr::OriginalName("None")] None = 0,
    [pbr::OriginalName("Single")] Single = 1,
    [pbr::OriginalName("Double")] Double = 2,
  }

  public enum BattleEmptyEvent {
    [pbr::OriginalName("BattleNone")] BattleNone = 0,
    [pbr::OriginalName("StopTimeCount")] StopTimeCount = 1,
  }

  #endregion

  #region Messages
  public sealed partial class Vector3Mess : pb::IMessage<Vector3Mess> {
    private static readonly pb::MessageParser<Vector3Mess> _parser = new pb::MessageParser<Vector3Mess>(() => new Vector3Mess());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector3Mess> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.BattleMessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3Mess() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3Mess(Vector3Mess other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3Mess Clone() {
      return new Vector3Mess(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector3Mess);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector3Mess other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector3Mess other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BallMessage : pb::IMessage<BallMessage> {
    private static readonly pb::MessageParser<BallMessage> _parser = new pb::MessageParser<BallMessage>(() => new BallMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BallMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.BattleMessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BallMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BallMessage(BallMessage other) : this() {
      ballId_ = other.ballId_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BallMessage Clone() {
      return new BallMessage(this);
    }

    /// <summary>Field number for the "ballId" field.</summary>
    public const int BallIdFieldNumber = 1;
    private int ballId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BallId {
      get { return ballId_; }
      set {
        ballId_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::GameMessage.Vector3Mess position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMessage.Vector3Mess Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 3;
    private global::GameMessage.Vector3Mess rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMessage.Vector3Mess Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BallMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BallMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BallId != other.BallId) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BallId != 0) hash ^= BallId.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BallId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BallId);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (rotation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Rotation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BallId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BallId);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BallMessage other) {
      if (other == null) {
        return;
      }
      if (other.BallId != 0) {
        BallId = other.BallId;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::GameMessage.Vector3Mess();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          Rotation = new global::GameMessage.Vector3Mess();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BallId = input.ReadInt32();
            break;
          }
          case 18: {
            if (position_ == null) {
              Position = new global::GameMessage.Vector3Mess();
            }
            input.ReadMessage(Position);
            break;
          }
          case 26: {
            if (rotation_ == null) {
              Rotation = new global::GameMessage.Vector3Mess();
            }
            input.ReadMessage(Rotation);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CSCueSync : pb::IMessage<CSCueSync> {
    private static readonly pb::MessageParser<CSCueSync> _parser = new pb::MessageParser<CSCueSync>(() => new CSCueSync());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSCueSync> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.BattleMessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSCueSync() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSCueSync(CSCueSync other) : this() {
      position_ = other.position_ != null ? other.position_.Clone() : null;
      angltY_ = other.angltY_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSCueSync Clone() {
      return new CSCueSync(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::GameMessage.Vector3Mess position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMessage.Vector3Mess Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "angltY" field.</summary>
    public const int AngltYFieldNumber = 2;
    private float angltY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AngltY {
      get { return angltY_; }
      set {
        angltY_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSCueSync);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSCueSync other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AngltY, other.AngltY)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (AngltY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AngltY);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (AngltY != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(AngltY);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (AngltY != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSCueSync other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::GameMessage.Vector3Mess();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.AngltY != 0F) {
        AngltY = other.AngltY;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::GameMessage.Vector3Mess();
            }
            input.ReadMessage(Position);
            break;
          }
          case 21: {
            AngltY = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SCCueSync : pb::IMessage<SCCueSync> {
    private static readonly pb::MessageParser<SCCueSync> _parser = new pb::MessageParser<SCCueSync>(() => new SCCueSync());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCCueSync> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.BattleMessageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCCueSync() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCCueSync(SCCueSync other) : this() {
      position_ = other.position_ != null ? other.position_.Clone() : null;
      angltY_ = other.angltY_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCCueSync Clone() {
      return new SCCueSync(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::GameMessage.Vector3Mess position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMessage.Vector3Mess Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "angltY" field.</summary>
    public const int AngltYFieldNumber = 2;
    private float angltY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AngltY {
      get { return angltY_; }
      set {
        angltY_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCCueSync);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCCueSync other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AngltY, other.AngltY)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (AngltY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AngltY);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (AngltY != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(AngltY);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (AngltY != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCCueSync other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::GameMessage.Vector3Mess();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.AngltY != 0F) {
        AngltY = other.AngltY;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::GameMessage.Vector3Mess();
            }
            input.ReadMessage(Position);
            break;
          }
          case 21: {
            AngltY = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SCCueStorageSync : pb::IMessage<SCCueStorageSync> {
    private static readonly pb::MessageParser<SCCueStorageSync> _parser = new pb::MessageParser<SCCueStorageSync>(() => new SCCueStorageSync());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCCueStorageSync> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.BattleMessageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCCueStorageSync() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCCueStorageSync(SCCueStorageSync other) : this() {
      fillAmount_ = other.fillAmount_;
      dirX_ = other.dirX_;
      dirY_ = other.dirY_;
      dirZ_ = other.dirZ_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCCueStorageSync Clone() {
      return new SCCueStorageSync(this);
    }

    /// <summary>Field number for the "fillAmount" field.</summary>
    public const int FillAmountFieldNumber = 1;
    private float fillAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FillAmount {
      get { return fillAmount_; }
      set {
        fillAmount_ = value;
      }
    }

    /// <summary>Field number for the "dir_x" field.</summary>
    public const int DirXFieldNumber = 2;
    private float dirX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DirX {
      get { return dirX_; }
      set {
        dirX_ = value;
      }
    }

    /// <summary>Field number for the "dir_y" field.</summary>
    public const int DirYFieldNumber = 3;
    private float dirY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DirY {
      get { return dirY_; }
      set {
        dirY_ = value;
      }
    }

    /// <summary>Field number for the "dir_z" field.</summary>
    public const int DirZFieldNumber = 4;
    private float dirZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DirZ {
      get { return dirZ_; }
      set {
        dirZ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCCueStorageSync);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCCueStorageSync other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillAmount, other.FillAmount)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DirX, other.DirX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DirY, other.DirY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DirZ, other.DirZ)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FillAmount != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillAmount);
      if (DirX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DirX);
      if (DirY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DirY);
      if (DirZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DirZ);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FillAmount != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(FillAmount);
      }
      if (DirX != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(DirX);
      }
      if (DirY != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(DirY);
      }
      if (DirZ != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(DirZ);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FillAmount != 0F) {
        size += 1 + 4;
      }
      if (DirX != 0F) {
        size += 1 + 4;
      }
      if (DirY != 0F) {
        size += 1 + 4;
      }
      if (DirZ != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCCueStorageSync other) {
      if (other == null) {
        return;
      }
      if (other.FillAmount != 0F) {
        FillAmount = other.FillAmount;
      }
      if (other.DirX != 0F) {
        DirX = other.DirX;
      }
      if (other.DirY != 0F) {
        DirY = other.DirY;
      }
      if (other.DirZ != 0F) {
        DirZ = other.DirZ;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            FillAmount = input.ReadFloat();
            break;
          }
          case 21: {
            DirX = input.ReadFloat();
            break;
          }
          case 29: {
            DirY = input.ReadFloat();
            break;
          }
          case 37: {
            DirZ = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CSCueStorageSync : pb::IMessage<CSCueStorageSync> {
    private static readonly pb::MessageParser<CSCueStorageSync> _parser = new pb::MessageParser<CSCueStorageSync>(() => new CSCueStorageSync());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSCueStorageSync> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.BattleMessageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSCueStorageSync() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSCueStorageSync(CSCueStorageSync other) : this() {
      fillAmount_ = other.fillAmount_;
      dirX_ = other.dirX_;
      dirY_ = other.dirY_;
      dirZ_ = other.dirZ_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSCueStorageSync Clone() {
      return new CSCueStorageSync(this);
    }

    /// <summary>Field number for the "fillAmount" field.</summary>
    public const int FillAmountFieldNumber = 1;
    private float fillAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FillAmount {
      get { return fillAmount_; }
      set {
        fillAmount_ = value;
      }
    }

    /// <summary>Field number for the "dir_x" field.</summary>
    public const int DirXFieldNumber = 2;
    private float dirX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DirX {
      get { return dirX_; }
      set {
        dirX_ = value;
      }
    }

    /// <summary>Field number for the "dir_y" field.</summary>
    public const int DirYFieldNumber = 3;
    private float dirY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DirY {
      get { return dirY_; }
      set {
        dirY_ = value;
      }
    }

    /// <summary>Field number for the "dir_z" field.</summary>
    public const int DirZFieldNumber = 4;
    private float dirZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DirZ {
      get { return dirZ_; }
      set {
        dirZ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSCueStorageSync);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSCueStorageSync other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FillAmount, other.FillAmount)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DirX, other.DirX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DirY, other.DirY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DirZ, other.DirZ)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FillAmount != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FillAmount);
      if (DirX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DirX);
      if (DirY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DirY);
      if (DirZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DirZ);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FillAmount != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(FillAmount);
      }
      if (DirX != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(DirX);
      }
      if (DirY != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(DirY);
      }
      if (DirZ != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(DirZ);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FillAmount != 0F) {
        size += 1 + 4;
      }
      if (DirX != 0F) {
        size += 1 + 4;
      }
      if (DirY != 0F) {
        size += 1 + 4;
      }
      if (DirZ != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSCueStorageSync other) {
      if (other == null) {
        return;
      }
      if (other.FillAmount != 0F) {
        FillAmount = other.FillAmount;
      }
      if (other.DirX != 0F) {
        DirX = other.DirX;
      }
      if (other.DirY != 0F) {
        DirY = other.DirY;
      }
      if (other.DirZ != 0F) {
        DirZ = other.DirZ;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            FillAmount = input.ReadFloat();
            break;
          }
          case 21: {
            DirX = input.ReadFloat();
            break;
          }
          case 29: {
            DirY = input.ReadFloat();
            break;
          }
          case 37: {
            DirZ = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CSBilliardSync : pb::IMessage<CSBilliardSync> {
    private static readonly pb::MessageParser<CSBilliardSync> _parser = new pb::MessageParser<CSBilliardSync>(() => new CSBilliardSync());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSBilliardSync> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.BattleMessageReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBilliardSync() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBilliardSync(CSBilliardSync other) : this() {
      ballMessages_ = other.ballMessages_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBilliardSync Clone() {
      return new CSBilliardSync(this);
    }

    /// <summary>Field number for the "ballMessages" field.</summary>
    public const int BallMessagesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameMessage.BallMessage> _repeated_ballMessages_codec
        = pb::FieldCodec.ForMessage(10, global::GameMessage.BallMessage.Parser);
    private readonly pbc::RepeatedField<global::GameMessage.BallMessage> ballMessages_ = new pbc::RepeatedField<global::GameMessage.BallMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameMessage.BallMessage> BallMessages {
      get { return ballMessages_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSBilliardSync);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSBilliardSync other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ballMessages_.Equals(other.ballMessages_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ballMessages_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ballMessages_.WriteTo(output, _repeated_ballMessages_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ballMessages_.CalculateSize(_repeated_ballMessages_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSBilliardSync other) {
      if (other == null) {
        return;
      }
      ballMessages_.Add(other.ballMessages_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ballMessages_.AddEntriesFrom(input, _repeated_ballMessages_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SCBilliardSync : pb::IMessage<SCBilliardSync> {
    private static readonly pb::MessageParser<SCBilliardSync> _parser = new pb::MessageParser<SCBilliardSync>(() => new SCBilliardSync());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCBilliardSync> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.BattleMessageReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCBilliardSync() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCBilliardSync(SCBilliardSync other) : this() {
      ballMessages_ = other.ballMessages_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCBilliardSync Clone() {
      return new SCBilliardSync(this);
    }

    /// <summary>Field number for the "ballMessages" field.</summary>
    public const int BallMessagesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameMessage.BallMessage> _repeated_ballMessages_codec
        = pb::FieldCodec.ForMessage(10, global::GameMessage.BallMessage.Parser);
    private readonly pbc::RepeatedField<global::GameMessage.BallMessage> ballMessages_ = new pbc::RepeatedField<global::GameMessage.BallMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameMessage.BallMessage> BallMessages {
      get { return ballMessages_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCBilliardSync);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCBilliardSync other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ballMessages_.Equals(other.ballMessages_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ballMessages_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ballMessages_.WriteTo(output, _repeated_ballMessages_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ballMessages_.CalculateSize(_repeated_ballMessages_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCBilliardSync other) {
      if (other == null) {
        return;
      }
      ballMessages_.Add(other.ballMessages_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ballMessages_.AddEntriesFrom(input, _repeated_ballMessages_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SCBilliardTypeConfirm : pb::IMessage<SCBilliardTypeConfirm> {
    private static readonly pb::MessageParser<SCBilliardTypeConfirm> _parser = new pb::MessageParser<SCBilliardTypeConfirm>(() => new SCBilliardTypeConfirm());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCBilliardTypeConfirm> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.BattleMessageReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCBilliardTypeConfirm() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCBilliardTypeConfirm(SCBilliardTypeConfirm other) : this() {
      scBilliardType_ = other.scBilliardType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCBilliardTypeConfirm Clone() {
      return new SCBilliardTypeConfirm(this);
    }

    /// <summary>Field number for the "scBilliardType" field.</summary>
    public const int ScBilliardTypeFieldNumber = 1;
    private global::GameMessage.BilliardType scBilliardType_ = global::GameMessage.BilliardType.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMessage.BilliardType ScBilliardType {
      get { return scBilliardType_; }
      set {
        scBilliardType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCBilliardTypeConfirm);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCBilliardTypeConfirm other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ScBilliardType != other.ScBilliardType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ScBilliardType != global::GameMessage.BilliardType.None) hash ^= ScBilliardType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ScBilliardType != global::GameMessage.BilliardType.None) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ScBilliardType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ScBilliardType != global::GameMessage.BilliardType.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ScBilliardType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCBilliardTypeConfirm other) {
      if (other == null) {
        return;
      }
      if (other.ScBilliardType != global::GameMessage.BilliardType.None) {
        ScBilliardType = other.ScBilliardType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ScBilliardType = (global::GameMessage.BilliardType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CSBilliardTypeConfirm : pb::IMessage<CSBilliardTypeConfirm> {
    private static readonly pb::MessageParser<CSBilliardTypeConfirm> _parser = new pb::MessageParser<CSBilliardTypeConfirm>(() => new CSBilliardTypeConfirm());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSBilliardTypeConfirm> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.BattleMessageReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBilliardTypeConfirm() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBilliardTypeConfirm(CSBilliardTypeConfirm other) : this() {
      csBilliardType_ = other.csBilliardType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBilliardTypeConfirm Clone() {
      return new CSBilliardTypeConfirm(this);
    }

    /// <summary>Field number for the "csBilliardType" field.</summary>
    public const int CsBilliardTypeFieldNumber = 1;
    private global::GameMessage.BilliardType csBilliardType_ = global::GameMessage.BilliardType.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMessage.BilliardType CsBilliardType {
      get { return csBilliardType_; }
      set {
        csBilliardType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSBilliardTypeConfirm);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSBilliardTypeConfirm other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CsBilliardType != other.CsBilliardType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CsBilliardType != global::GameMessage.BilliardType.None) hash ^= CsBilliardType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CsBilliardType != global::GameMessage.BilliardType.None) {
        output.WriteRawTag(8);
        output.WriteEnum((int) CsBilliardType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CsBilliardType != global::GameMessage.BilliardType.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CsBilliardType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSBilliardTypeConfirm other) {
      if (other == null) {
        return;
      }
      if (other.CsBilliardType != global::GameMessage.BilliardType.None) {
        CsBilliardType = other.CsBilliardType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CsBilliardType = (global::GameMessage.BilliardType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CSTurnAnalysis : pb::IMessage<CSTurnAnalysis> {
    private static readonly pb::MessageParser<CSTurnAnalysis> _parser = new pb::MessageParser<CSTurnAnalysis>(() => new CSTurnAnalysis());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSTurnAnalysis> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.BattleMessageReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSTurnAnalysis() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSTurnAnalysis(CSTurnAnalysis other) : this() {
      fristCollideBIlliardId_ = other.fristCollideBIlliardId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSTurnAnalysis Clone() {
      return new CSTurnAnalysis(this);
    }

    /// <summary>Field number for the "fristCollideBIlliardId" field.</summary>
    public const int FristCollideBIlliardIdFieldNumber = 1;
    private int fristCollideBIlliardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FristCollideBIlliardId {
      get { return fristCollideBIlliardId_; }
      set {
        fristCollideBIlliardId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSTurnAnalysis);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSTurnAnalysis other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FristCollideBIlliardId != other.FristCollideBIlliardId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FristCollideBIlliardId != 0) hash ^= FristCollideBIlliardId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FristCollideBIlliardId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FristCollideBIlliardId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FristCollideBIlliardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FristCollideBIlliardId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSTurnAnalysis other) {
      if (other == null) {
        return;
      }
      if (other.FristCollideBIlliardId != 0) {
        FristCollideBIlliardId = other.FristCollideBIlliardId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FristCollideBIlliardId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SCTurnAnalysis : pb::IMessage<SCTurnAnalysis> {
    private static readonly pb::MessageParser<SCTurnAnalysis> _parser = new pb::MessageParser<SCTurnAnalysis>(() => new SCTurnAnalysis());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCTurnAnalysis> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.BattleMessageReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTurnAnalysis() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTurnAnalysis(SCTurnAnalysis other) : this() {
      fristCollideBIlliardId_ = other.fristCollideBIlliardId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTurnAnalysis Clone() {
      return new SCTurnAnalysis(this);
    }

    /// <summary>Field number for the "fristCollideBIlliardId" field.</summary>
    public const int FristCollideBIlliardIdFieldNumber = 1;
    private int fristCollideBIlliardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FristCollideBIlliardId {
      get { return fristCollideBIlliardId_; }
      set {
        fristCollideBIlliardId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCTurnAnalysis);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCTurnAnalysis other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FristCollideBIlliardId != other.FristCollideBIlliardId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FristCollideBIlliardId != 0) hash ^= FristCollideBIlliardId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FristCollideBIlliardId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FristCollideBIlliardId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FristCollideBIlliardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FristCollideBIlliardId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCTurnAnalysis other) {
      if (other == null) {
        return;
      }
      if (other.FristCollideBIlliardId != 0) {
        FristCollideBIlliardId = other.FristCollideBIlliardId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FristCollideBIlliardId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CSEndTurn : pb::IMessage<CSEndTurn> {
    private static readonly pb::MessageParser<CSEndTurn> _parser = new pb::MessageParser<CSEndTurn>(() => new CSEndTurn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSEndTurn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.BattleMessageReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSEndTurn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSEndTurn(CSEndTurn other) : this() {
      isfoul_ = other.isfoul_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSEndTurn Clone() {
      return new CSEndTurn(this);
    }

    /// <summary>Field number for the "isfoul" field.</summary>
    public const int IsfoulFieldNumber = 1;
    private bool isfoul_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Isfoul {
      get { return isfoul_; }
      set {
        isfoul_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSEndTurn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSEndTurn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Isfoul != other.Isfoul) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Isfoul != false) hash ^= Isfoul.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Isfoul != false) {
        output.WriteRawTag(8);
        output.WriteBool(Isfoul);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Isfoul != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSEndTurn other) {
      if (other == null) {
        return;
      }
      if (other.Isfoul != false) {
        Isfoul = other.Isfoul;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Isfoul = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SCStartTurn : pb::IMessage<SCStartTurn> {
    private static readonly pb::MessageParser<SCStartTurn> _parser = new pb::MessageParser<SCStartTurn>(() => new SCStartTurn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCStartTurn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.BattleMessageReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCStartTurn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCStartTurn(SCStartTurn other) : this() {
      isPlacewhite_ = other.isPlacewhite_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCStartTurn Clone() {
      return new SCStartTurn(this);
    }

    /// <summary>Field number for the "is_placewhite" field.</summary>
    public const int IsPlacewhiteFieldNumber = 1;
    private bool isPlacewhite_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPlacewhite {
      get { return isPlacewhite_; }
      set {
        isPlacewhite_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCStartTurn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCStartTurn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsPlacewhite != other.IsPlacewhite) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsPlacewhite != false) hash ^= IsPlacewhite.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsPlacewhite != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsPlacewhite);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsPlacewhite != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCStartTurn other) {
      if (other == null) {
        return;
      }
      if (other.IsPlacewhite != false) {
        IsPlacewhite = other.IsPlacewhite;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsPlacewhite = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CSExitGameRoom : pb::IMessage<CSExitGameRoom> {
    private static readonly pb::MessageParser<CSExitGameRoom> _parser = new pb::MessageParser<CSExitGameRoom>(() => new CSExitGameRoom());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSExitGameRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.BattleMessageReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSExitGameRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSExitGameRoom(CSExitGameRoom other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSExitGameRoom Clone() {
      return new CSExitGameRoom(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSExitGameRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSExitGameRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSExitGameRoom other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class CSSetBilliardState : pb::IMessage<CSSetBilliardState> {
    private static readonly pb::MessageParser<CSSetBilliardState> _parser = new pb::MessageParser<CSSetBilliardState>(() => new CSSetBilliardState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSetBilliardState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.BattleMessageReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSetBilliardState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSetBilliardState(CSSetBilliardState other) : this() {
      billiardId_ = other.billiardId_;
      active_ = other.active_;
      physicsIsOpen_ = other.physicsIsOpen_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSetBilliardState Clone() {
      return new CSSetBilliardState(this);
    }

    /// <summary>Field number for the "billiardId" field.</summary>
    public const int BilliardIdFieldNumber = 1;
    private int billiardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BilliardId {
      get { return billiardId_; }
      set {
        billiardId_ = value;
      }
    }

    /// <summary>Field number for the "active" field.</summary>
    public const int ActiveFieldNumber = 2;
    private bool active_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Active {
      get { return active_; }
      set {
        active_ = value;
      }
    }

    /// <summary>Field number for the "physicsIsOpen" field.</summary>
    public const int PhysicsIsOpenFieldNumber = 3;
    private bool physicsIsOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PhysicsIsOpen {
      get { return physicsIsOpen_; }
      set {
        physicsIsOpen_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSSetBilliardState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSSetBilliardState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BilliardId != other.BilliardId) return false;
      if (Active != other.Active) return false;
      if (PhysicsIsOpen != other.PhysicsIsOpen) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BilliardId != 0) hash ^= BilliardId.GetHashCode();
      if (Active != false) hash ^= Active.GetHashCode();
      if (PhysicsIsOpen != false) hash ^= PhysicsIsOpen.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BilliardId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BilliardId);
      }
      if (Active != false) {
        output.WriteRawTag(16);
        output.WriteBool(Active);
      }
      if (PhysicsIsOpen != false) {
        output.WriteRawTag(24);
        output.WriteBool(PhysicsIsOpen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BilliardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BilliardId);
      }
      if (Active != false) {
        size += 1 + 1;
      }
      if (PhysicsIsOpen != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSSetBilliardState other) {
      if (other == null) {
        return;
      }
      if (other.BilliardId != 0) {
        BilliardId = other.BilliardId;
      }
      if (other.Active != false) {
        Active = other.Active;
      }
      if (other.PhysicsIsOpen != false) {
        PhysicsIsOpen = other.PhysicsIsOpen;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BilliardId = input.ReadInt32();
            break;
          }
          case 16: {
            Active = input.ReadBool();
            break;
          }
          case 24: {
            PhysicsIsOpen = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SCSetBilliardState : pb::IMessage<SCSetBilliardState> {
    private static readonly pb::MessageParser<SCSetBilliardState> _parser = new pb::MessageParser<SCSetBilliardState>(() => new SCSetBilliardState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCSetBilliardState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.BattleMessageReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSetBilliardState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSetBilliardState(SCSetBilliardState other) : this() {
      billiardId_ = other.billiardId_;
      active_ = other.active_;
      physicsIsOpen_ = other.physicsIsOpen_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSetBilliardState Clone() {
      return new SCSetBilliardState(this);
    }

    /// <summary>Field number for the "billiardId" field.</summary>
    public const int BilliardIdFieldNumber = 1;
    private int billiardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BilliardId {
      get { return billiardId_; }
      set {
        billiardId_ = value;
      }
    }

    /// <summary>Field number for the "active" field.</summary>
    public const int ActiveFieldNumber = 2;
    private bool active_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Active {
      get { return active_; }
      set {
        active_ = value;
      }
    }

    /// <summary>Field number for the "physicsIsOpen" field.</summary>
    public const int PhysicsIsOpenFieldNumber = 3;
    private bool physicsIsOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PhysicsIsOpen {
      get { return physicsIsOpen_; }
      set {
        physicsIsOpen_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCSetBilliardState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCSetBilliardState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BilliardId != other.BilliardId) return false;
      if (Active != other.Active) return false;
      if (PhysicsIsOpen != other.PhysicsIsOpen) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BilliardId != 0) hash ^= BilliardId.GetHashCode();
      if (Active != false) hash ^= Active.GetHashCode();
      if (PhysicsIsOpen != false) hash ^= PhysicsIsOpen.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BilliardId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BilliardId);
      }
      if (Active != false) {
        output.WriteRawTag(16);
        output.WriteBool(Active);
      }
      if (PhysicsIsOpen != false) {
        output.WriteRawTag(24);
        output.WriteBool(PhysicsIsOpen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BilliardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BilliardId);
      }
      if (Active != false) {
        size += 1 + 1;
      }
      if (PhysicsIsOpen != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCSetBilliardState other) {
      if (other == null) {
        return;
      }
      if (other.BilliardId != 0) {
        BilliardId = other.BilliardId;
      }
      if (other.Active != false) {
        Active = other.Active;
      }
      if (other.PhysicsIsOpen != false) {
        PhysicsIsOpen = other.PhysicsIsOpen;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BilliardId = input.ReadInt32();
            break;
          }
          case 16: {
            Active = input.ReadBool();
            break;
          }
          case 24: {
            PhysicsIsOpen = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Sound
  /// </summary>
  public sealed partial class CSSyncSound : pb::IMessage<CSSyncSound> {
    private static readonly pb::MessageParser<CSSyncSound> _parser = new pb::MessageParser<CSSyncSound>(() => new CSSyncSound());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSyncSound> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.BattleMessageReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSyncSound() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSyncSound(CSSyncSound other) : this() {
      soundId_ = other.soundId_;
      volumn_ = other.volumn_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSyncSound Clone() {
      return new CSSyncSound(this);
    }

    /// <summary>Field number for the "soundId" field.</summary>
    public const int SoundIdFieldNumber = 1;
    private int soundId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SoundId {
      get { return soundId_; }
      set {
        soundId_ = value;
      }
    }

    /// <summary>Field number for the "volumn" field.</summary>
    public const int VolumnFieldNumber = 2;
    private float volumn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Volumn {
      get { return volumn_; }
      set {
        volumn_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private global::GameMessage.Vector3Mess position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMessage.Vector3Mess Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSSyncSound);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSSyncSound other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SoundId != other.SoundId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Volumn, other.Volumn)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SoundId != 0) hash ^= SoundId.GetHashCode();
      if (Volumn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Volumn);
      if (position_ != null) hash ^= Position.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SoundId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SoundId);
      }
      if (Volumn != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Volumn);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SoundId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SoundId);
      }
      if (Volumn != 0F) {
        size += 1 + 4;
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSSyncSound other) {
      if (other == null) {
        return;
      }
      if (other.SoundId != 0) {
        SoundId = other.SoundId;
      }
      if (other.Volumn != 0F) {
        Volumn = other.Volumn;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::GameMessage.Vector3Mess();
        }
        Position.MergeFrom(other.Position);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SoundId = input.ReadInt32();
            break;
          }
          case 21: {
            Volumn = input.ReadFloat();
            break;
          }
          case 26: {
            if (position_ == null) {
              Position = new global::GameMessage.Vector3Mess();
            }
            input.ReadMessage(Position);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SCSyncSound : pb::IMessage<SCSyncSound> {
    private static readonly pb::MessageParser<SCSyncSound> _parser = new pb::MessageParser<SCSyncSound>(() => new SCSyncSound());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCSyncSound> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.BattleMessageReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncSound() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncSound(SCSyncSound other) : this() {
      soundId_ = other.soundId_;
      volumn_ = other.volumn_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncSound Clone() {
      return new SCSyncSound(this);
    }

    /// <summary>Field number for the "soundId" field.</summary>
    public const int SoundIdFieldNumber = 1;
    private int soundId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SoundId {
      get { return soundId_; }
      set {
        soundId_ = value;
      }
    }

    /// <summary>Field number for the "volumn" field.</summary>
    public const int VolumnFieldNumber = 2;
    private float volumn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Volumn {
      get { return volumn_; }
      set {
        volumn_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private global::GameMessage.Vector3Mess position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMessage.Vector3Mess Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCSyncSound);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCSyncSound other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SoundId != other.SoundId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Volumn, other.Volumn)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SoundId != 0) hash ^= SoundId.GetHashCode();
      if (Volumn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Volumn);
      if (position_ != null) hash ^= Position.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SoundId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SoundId);
      }
      if (Volumn != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Volumn);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SoundId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SoundId);
      }
      if (Volumn != 0F) {
        size += 1 + 4;
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCSyncSound other) {
      if (other == null) {
        return;
      }
      if (other.SoundId != 0) {
        SoundId = other.SoundId;
      }
      if (other.Volumn != 0F) {
        Volumn = other.Volumn;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::GameMessage.Vector3Mess();
        }
        Position.MergeFrom(other.Position);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SoundId = input.ReadInt32();
            break;
          }
          case 21: {
            Volumn = input.ReadFloat();
            break;
          }
          case 26: {
            if (position_ == null) {
              Position = new global::GameMessage.Vector3Mess();
            }
            input.ReadMessage(Position);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CSBattleEmptyEvent : pb::IMessage<CSBattleEmptyEvent> {
    private static readonly pb::MessageParser<CSBattleEmptyEvent> _parser = new pb::MessageParser<CSBattleEmptyEvent>(() => new CSBattleEmptyEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSBattleEmptyEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.BattleMessageReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBattleEmptyEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBattleEmptyEvent(CSBattleEmptyEvent other) : this() {
      battleEvent_ = other.battleEvent_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBattleEmptyEvent Clone() {
      return new CSBattleEmptyEvent(this);
    }

    /// <summary>Field number for the "battleEvent" field.</summary>
    public const int BattleEventFieldNumber = 1;
    private global::GameMessage.BattleEmptyEvent battleEvent_ = global::GameMessage.BattleEmptyEvent.BattleNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMessage.BattleEmptyEvent BattleEvent {
      get { return battleEvent_; }
      set {
        battleEvent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSBattleEmptyEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSBattleEmptyEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BattleEvent != other.BattleEvent) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BattleEvent != global::GameMessage.BattleEmptyEvent.BattleNone) hash ^= BattleEvent.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleEvent != global::GameMessage.BattleEmptyEvent.BattleNone) {
        output.WriteRawTag(8);
        output.WriteEnum((int) BattleEvent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleEvent != global::GameMessage.BattleEmptyEvent.BattleNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BattleEvent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSBattleEmptyEvent other) {
      if (other == null) {
        return;
      }
      if (other.BattleEvent != global::GameMessage.BattleEmptyEvent.BattleNone) {
        BattleEvent = other.BattleEvent;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BattleEvent = (global::GameMessage.BattleEmptyEvent) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SCBattleEmptyEvent : pb::IMessage<SCBattleEmptyEvent> {
    private static readonly pb::MessageParser<SCBattleEmptyEvent> _parser = new pb::MessageParser<SCBattleEmptyEvent>(() => new SCBattleEmptyEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCBattleEmptyEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.BattleMessageReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCBattleEmptyEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCBattleEmptyEvent(SCBattleEmptyEvent other) : this() {
      battleEvent_ = other.battleEvent_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCBattleEmptyEvent Clone() {
      return new SCBattleEmptyEvent(this);
    }

    /// <summary>Field number for the "battleEvent" field.</summary>
    public const int BattleEventFieldNumber = 1;
    private global::GameMessage.BattleEmptyEvent battleEvent_ = global::GameMessage.BattleEmptyEvent.BattleNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMessage.BattleEmptyEvent BattleEvent {
      get { return battleEvent_; }
      set {
        battleEvent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCBattleEmptyEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCBattleEmptyEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BattleEvent != other.BattleEvent) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BattleEvent != global::GameMessage.BattleEmptyEvent.BattleNone) hash ^= BattleEvent.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleEvent != global::GameMessage.BattleEmptyEvent.BattleNone) {
        output.WriteRawTag(8);
        output.WriteEnum((int) BattleEvent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleEvent != global::GameMessage.BattleEmptyEvent.BattleNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BattleEvent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCBattleEmptyEvent other) {
      if (other == null) {
        return;
      }
      if (other.BattleEvent != global::GameMessage.BattleEmptyEvent.BattleNone) {
        BattleEvent = other.BattleEvent;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BattleEvent = (global::GameMessage.BattleEmptyEvent) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
