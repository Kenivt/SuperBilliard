// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: UserData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GameMessage {

  /// <summary>Holder for reflection information generated from UserData.proto</summary>
  public static partial class UserDataReflection {

    #region Descriptor
    /// <summary>File descriptor for UserData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UserDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5Vc2VyRGF0YS5wcm90bxILR2FtZU1lc3NhZ2UiMAoKQ1NSaWdpc3RlchIQ",
            "Cgh1c2VybmFtZRgBIAEoCRIQCghwYXNzd29yZBgCIAEoCSI3CgpTQ1JpZ2lz",
            "dGVyEikKBnJlc3VsdBgBIAEoDjIZLkdhbWVNZXNzYWdlLlJldHVyblJlc3Vs",
            "dCItCgdDU0xvZ2luEhAKCHVzZXJuYW1lGAEgASgJEhAKCHBhc3N3b3JkGAIg",
            "ASgJIkYKB1NDTG9naW4SKQoGcmVzdWx0GAEgASgOMhkuR2FtZU1lc3NhZ2Uu",
            "UmV0dXJuUmVzdWx0EhAKCHVzZXJuYW1lGAIgASgJIsMBCg9TQ1BsYXllck1l",
            "c3NhZ2USEwoLcG1fdXNlck5hbWUYASABKAkSEwoLcG1fc25pa05hbWUYAiAB",
            "KAkSEQoJcG1faWNvbklkGAMgASgFEhAKCHBtX2xldmVsGAQgASgFEhYKDnBt",
            "X2Rlc2NyaXB0aW9uGAUgASgJEhEKCXBtX2ZhY2VJZBgGIAEoBRIRCglwbV9o",
            "YWlySWQYByABKAUSEQoJcG1fYm9keUlkGAggASgFEhAKCHBtX2tpdElkGAkg",
            "ASgFIo0BChNDU1NhdmVQbGF5ZXJNZXNzYWdlEhAKCHVzZXJOYW1lGAEgASgJ",
            "EhAKCHNuaWtOYW1lGAIgASgJEg4KBmZhY2VJZBgDIAEoBRIOCgZoYWlySWQY",
            "BCABKAUSDgoGYm9keUlkGAUgASgFEg0KBWtpdElkGAYgASgFEhMKC2Rlc2Ny",
            "aXB0aW9uGAcgASgJIioKEkNTR2V0UGxheWVyTWVzc2FnZRIUCgxncG1fdXNl",
            "cm5hbWUYASABKAkiYQoPU0NSZXR1cm5NZXNzYWdlEhIKCmNzUGFja2V0SWQY",
            "ASABKAUSKQoGcmVzdWx0GAIgASgOMhkuR2FtZU1lc3NhZ2UuUmV0dXJuUmVz",
            "dWx0Eg8KB21lc3NhZ2UYAyABKAkqMgoMUmV0dXJuUmVzdWx0EggKBE5vbmUQ",
            "ABILCgdTdWNjZXNzEAESCwoHRmFpbHVyZRACYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::GameMessage.ReturnResult), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.CSRigister), global::GameMessage.CSRigister.Parser, new[]{ "Username", "Password" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.SCRigister), global::GameMessage.SCRigister.Parser, new[]{ "Result" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.CSLogin), global::GameMessage.CSLogin.Parser, new[]{ "Username", "Password" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.SCLogin), global::GameMessage.SCLogin.Parser, new[]{ "Result", "Username" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.SCPlayerMessage), global::GameMessage.SCPlayerMessage.Parser, new[]{ "PmUserName", "PmSnikName", "PmIconId", "PmLevel", "PmDescription", "PmFaceId", "PmHairId", "PmBodyId", "PmKitId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.CSSavePlayerMessage), global::GameMessage.CSSavePlayerMessage.Parser, new[]{ "UserName", "SnikName", "FaceId", "HairId", "BodyId", "KitId", "Description" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.CSGetPlayerMessage), global::GameMessage.CSGetPlayerMessage.Parser, new[]{ "GpmUsername" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.SCReturnMessage), global::GameMessage.SCReturnMessage.Parser, new[]{ "CsPacketId", "Result", "Message" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ReturnResult {
    [pbr::OriginalName("None")] None = 0,
    [pbr::OriginalName("Success")] Success = 1,
    [pbr::OriginalName("Failure")] Failure = 2,
  }

  #endregion

  #region Messages
  public sealed partial class CSRigister : pb::IMessage<CSRigister> {
    private static readonly pb::MessageParser<CSRigister> _parser = new pb::MessageParser<CSRigister>(() => new CSRigister());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRigister> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.UserDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSRigister() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSRigister(CSRigister other) : this() {
      username_ = other.username_;
      password_ = other.password_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSRigister Clone() {
      return new CSRigister(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSRigister);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSRigister other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSRigister other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SCRigister : pb::IMessage<SCRigister> {
    private static readonly pb::MessageParser<SCRigister> _parser = new pb::MessageParser<SCRigister>(() => new SCRigister());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCRigister> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.UserDataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCRigister() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCRigister(SCRigister other) : this() {
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCRigister Clone() {
      return new SCRigister(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::GameMessage.ReturnResult result_ = global::GameMessage.ReturnResult.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMessage.ReturnResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCRigister);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCRigister other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != global::GameMessage.ReturnResult.None) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != global::GameMessage.ReturnResult.None) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != global::GameMessage.ReturnResult.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCRigister other) {
      if (other == null) {
        return;
      }
      if (other.Result != global::GameMessage.ReturnResult.None) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = (global::GameMessage.ReturnResult) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CSLogin : pb::IMessage<CSLogin> {
    private static readonly pb::MessageParser<CSLogin> _parser = new pb::MessageParser<CSLogin>(() => new CSLogin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.UserDataReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLogin(CSLogin other) : this() {
      username_ = other.username_;
      password_ = other.password_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLogin Clone() {
      return new CSLogin(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSLogin other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SCLogin : pb::IMessage<SCLogin> {
    private static readonly pb::MessageParser<SCLogin> _parser = new pb::MessageParser<SCLogin>(() => new SCLogin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.UserDataReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCLogin(SCLogin other) : this() {
      result_ = other.result_;
      username_ = other.username_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCLogin Clone() {
      return new SCLogin(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::GameMessage.ReturnResult result_ = global::GameMessage.ReturnResult.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMessage.ReturnResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 2;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (Username != other.Username) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != global::GameMessage.ReturnResult.None) hash ^= Result.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != global::GameMessage.ReturnResult.None) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != global::GameMessage.ReturnResult.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCLogin other) {
      if (other == null) {
        return;
      }
      if (other.Result != global::GameMessage.ReturnResult.None) {
        Result = other.Result;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = (global::GameMessage.ReturnResult) input.ReadEnum();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SCPlayerMessage : pb::IMessage<SCPlayerMessage> {
    private static readonly pb::MessageParser<SCPlayerMessage> _parser = new pb::MessageParser<SCPlayerMessage>(() => new SCPlayerMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCPlayerMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.UserDataReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPlayerMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPlayerMessage(SCPlayerMessage other) : this() {
      pmUserName_ = other.pmUserName_;
      pmSnikName_ = other.pmSnikName_;
      pmIconId_ = other.pmIconId_;
      pmLevel_ = other.pmLevel_;
      pmDescription_ = other.pmDescription_;
      pmFaceId_ = other.pmFaceId_;
      pmHairId_ = other.pmHairId_;
      pmBodyId_ = other.pmBodyId_;
      pmKitId_ = other.pmKitId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPlayerMessage Clone() {
      return new SCPlayerMessage(this);
    }

    /// <summary>Field number for the "pm_userName" field.</summary>
    public const int PmUserNameFieldNumber = 1;
    private string pmUserName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PmUserName {
      get { return pmUserName_; }
      set {
        pmUserName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pm_snikName" field.</summary>
    public const int PmSnikNameFieldNumber = 2;
    private string pmSnikName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PmSnikName {
      get { return pmSnikName_; }
      set {
        pmSnikName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pm_iconId" field.</summary>
    public const int PmIconIdFieldNumber = 3;
    private int pmIconId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PmIconId {
      get { return pmIconId_; }
      set {
        pmIconId_ = value;
      }
    }

    /// <summary>Field number for the "pm_level" field.</summary>
    public const int PmLevelFieldNumber = 4;
    private int pmLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PmLevel {
      get { return pmLevel_; }
      set {
        pmLevel_ = value;
      }
    }

    /// <summary>Field number for the "pm_description" field.</summary>
    public const int PmDescriptionFieldNumber = 5;
    private string pmDescription_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PmDescription {
      get { return pmDescription_; }
      set {
        pmDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pm_faceId" field.</summary>
    public const int PmFaceIdFieldNumber = 6;
    private int pmFaceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PmFaceId {
      get { return pmFaceId_; }
      set {
        pmFaceId_ = value;
      }
    }

    /// <summary>Field number for the "pm_hairId" field.</summary>
    public const int PmHairIdFieldNumber = 7;
    private int pmHairId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PmHairId {
      get { return pmHairId_; }
      set {
        pmHairId_ = value;
      }
    }

    /// <summary>Field number for the "pm_bodyId" field.</summary>
    public const int PmBodyIdFieldNumber = 8;
    private int pmBodyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PmBodyId {
      get { return pmBodyId_; }
      set {
        pmBodyId_ = value;
      }
    }

    /// <summary>Field number for the "pm_kitId" field.</summary>
    public const int PmKitIdFieldNumber = 9;
    private int pmKitId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PmKitId {
      get { return pmKitId_; }
      set {
        pmKitId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCPlayerMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCPlayerMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PmUserName != other.PmUserName) return false;
      if (PmSnikName != other.PmSnikName) return false;
      if (PmIconId != other.PmIconId) return false;
      if (PmLevel != other.PmLevel) return false;
      if (PmDescription != other.PmDescription) return false;
      if (PmFaceId != other.PmFaceId) return false;
      if (PmHairId != other.PmHairId) return false;
      if (PmBodyId != other.PmBodyId) return false;
      if (PmKitId != other.PmKitId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PmUserName.Length != 0) hash ^= PmUserName.GetHashCode();
      if (PmSnikName.Length != 0) hash ^= PmSnikName.GetHashCode();
      if (PmIconId != 0) hash ^= PmIconId.GetHashCode();
      if (PmLevel != 0) hash ^= PmLevel.GetHashCode();
      if (PmDescription.Length != 0) hash ^= PmDescription.GetHashCode();
      if (PmFaceId != 0) hash ^= PmFaceId.GetHashCode();
      if (PmHairId != 0) hash ^= PmHairId.GetHashCode();
      if (PmBodyId != 0) hash ^= PmBodyId.GetHashCode();
      if (PmKitId != 0) hash ^= PmKitId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PmUserName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PmUserName);
      }
      if (PmSnikName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PmSnikName);
      }
      if (PmIconId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PmIconId);
      }
      if (PmLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PmLevel);
      }
      if (PmDescription.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PmDescription);
      }
      if (PmFaceId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PmFaceId);
      }
      if (PmHairId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PmHairId);
      }
      if (PmBodyId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(PmBodyId);
      }
      if (PmKitId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(PmKitId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PmUserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PmUserName);
      }
      if (PmSnikName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PmSnikName);
      }
      if (PmIconId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PmIconId);
      }
      if (PmLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PmLevel);
      }
      if (PmDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PmDescription);
      }
      if (PmFaceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PmFaceId);
      }
      if (PmHairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PmHairId);
      }
      if (PmBodyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PmBodyId);
      }
      if (PmKitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PmKitId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCPlayerMessage other) {
      if (other == null) {
        return;
      }
      if (other.PmUserName.Length != 0) {
        PmUserName = other.PmUserName;
      }
      if (other.PmSnikName.Length != 0) {
        PmSnikName = other.PmSnikName;
      }
      if (other.PmIconId != 0) {
        PmIconId = other.PmIconId;
      }
      if (other.PmLevel != 0) {
        PmLevel = other.PmLevel;
      }
      if (other.PmDescription.Length != 0) {
        PmDescription = other.PmDescription;
      }
      if (other.PmFaceId != 0) {
        PmFaceId = other.PmFaceId;
      }
      if (other.PmHairId != 0) {
        PmHairId = other.PmHairId;
      }
      if (other.PmBodyId != 0) {
        PmBodyId = other.PmBodyId;
      }
      if (other.PmKitId != 0) {
        PmKitId = other.PmKitId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PmUserName = input.ReadString();
            break;
          }
          case 18: {
            PmSnikName = input.ReadString();
            break;
          }
          case 24: {
            PmIconId = input.ReadInt32();
            break;
          }
          case 32: {
            PmLevel = input.ReadInt32();
            break;
          }
          case 42: {
            PmDescription = input.ReadString();
            break;
          }
          case 48: {
            PmFaceId = input.ReadInt32();
            break;
          }
          case 56: {
            PmHairId = input.ReadInt32();
            break;
          }
          case 64: {
            PmBodyId = input.ReadInt32();
            break;
          }
          case 72: {
            PmKitId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CSSavePlayerMessage : pb::IMessage<CSSavePlayerMessage> {
    private static readonly pb::MessageParser<CSSavePlayerMessage> _parser = new pb::MessageParser<CSSavePlayerMessage>(() => new CSSavePlayerMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSavePlayerMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.UserDataReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSavePlayerMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSavePlayerMessage(CSSavePlayerMessage other) : this() {
      userName_ = other.userName_;
      snikName_ = other.snikName_;
      faceId_ = other.faceId_;
      hairId_ = other.hairId_;
      bodyId_ = other.bodyId_;
      kitId_ = other.kitId_;
      description_ = other.description_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSavePlayerMessage Clone() {
      return new CSSavePlayerMessage(this);
    }

    /// <summary>Field number for the "userName" field.</summary>
    public const int UserNameFieldNumber = 1;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "snikName" field.</summary>
    public const int SnikNameFieldNumber = 2;
    private string snikName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SnikName {
      get { return snikName_; }
      set {
        snikName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "faceId" field.</summary>
    public const int FaceIdFieldNumber = 3;
    private int faceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FaceId {
      get { return faceId_; }
      set {
        faceId_ = value;
      }
    }

    /// <summary>Field number for the "hairId" field.</summary>
    public const int HairIdFieldNumber = 4;
    private int hairId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HairId {
      get { return hairId_; }
      set {
        hairId_ = value;
      }
    }

    /// <summary>Field number for the "bodyId" field.</summary>
    public const int BodyIdFieldNumber = 5;
    private int bodyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BodyId {
      get { return bodyId_; }
      set {
        bodyId_ = value;
      }
    }

    /// <summary>Field number for the "kitId" field.</summary>
    public const int KitIdFieldNumber = 6;
    private int kitId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KitId {
      get { return kitId_; }
      set {
        kitId_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 7;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSSavePlayerMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSSavePlayerMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserName != other.UserName) return false;
      if (SnikName != other.SnikName) return false;
      if (FaceId != other.FaceId) return false;
      if (HairId != other.HairId) return false;
      if (BodyId != other.BodyId) return false;
      if (KitId != other.KitId) return false;
      if (Description != other.Description) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (SnikName.Length != 0) hash ^= SnikName.GetHashCode();
      if (FaceId != 0) hash ^= FaceId.GetHashCode();
      if (HairId != 0) hash ^= HairId.GetHashCode();
      if (BodyId != 0) hash ^= BodyId.GetHashCode();
      if (KitId != 0) hash ^= KitId.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserName);
      }
      if (SnikName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SnikName);
      }
      if (FaceId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FaceId);
      }
      if (HairId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(HairId);
      }
      if (BodyId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BodyId);
      }
      if (KitId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(KitId);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Description);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (SnikName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SnikName);
      }
      if (FaceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FaceId);
      }
      if (HairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HairId);
      }
      if (BodyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BodyId);
      }
      if (KitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KitId);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSSavePlayerMessage other) {
      if (other == null) {
        return;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.SnikName.Length != 0) {
        SnikName = other.SnikName;
      }
      if (other.FaceId != 0) {
        FaceId = other.FaceId;
      }
      if (other.HairId != 0) {
        HairId = other.HairId;
      }
      if (other.BodyId != 0) {
        BodyId = other.BodyId;
      }
      if (other.KitId != 0) {
        KitId = other.KitId;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserName = input.ReadString();
            break;
          }
          case 18: {
            SnikName = input.ReadString();
            break;
          }
          case 24: {
            FaceId = input.ReadInt32();
            break;
          }
          case 32: {
            HairId = input.ReadInt32();
            break;
          }
          case 40: {
            BodyId = input.ReadInt32();
            break;
          }
          case 48: {
            KitId = input.ReadInt32();
            break;
          }
          case 58: {
            Description = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CSGetPlayerMessage : pb::IMessage<CSGetPlayerMessage> {
    private static readonly pb::MessageParser<CSGetPlayerMessage> _parser = new pb::MessageParser<CSGetPlayerMessage>(() => new CSGetPlayerMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSGetPlayerMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.UserDataReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetPlayerMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetPlayerMessage(CSGetPlayerMessage other) : this() {
      gpmUsername_ = other.gpmUsername_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetPlayerMessage Clone() {
      return new CSGetPlayerMessage(this);
    }

    /// <summary>Field number for the "gpm_username" field.</summary>
    public const int GpmUsernameFieldNumber = 1;
    private string gpmUsername_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GpmUsername {
      get { return gpmUsername_; }
      set {
        gpmUsername_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSGetPlayerMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSGetPlayerMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GpmUsername != other.GpmUsername) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GpmUsername.Length != 0) hash ^= GpmUsername.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GpmUsername.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GpmUsername);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GpmUsername.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GpmUsername);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSGetPlayerMessage other) {
      if (other == null) {
        return;
      }
      if (other.GpmUsername.Length != 0) {
        GpmUsername = other.GpmUsername;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GpmUsername = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务器的回复信息
  /// </summary>
  public sealed partial class SCReturnMessage : pb::IMessage<SCReturnMessage> {
    private static readonly pb::MessageParser<SCReturnMessage> _parser = new pb::MessageParser<SCReturnMessage>(() => new SCReturnMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCReturnMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.UserDataReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCReturnMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCReturnMessage(SCReturnMessage other) : this() {
      csPacketId_ = other.csPacketId_;
      result_ = other.result_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCReturnMessage Clone() {
      return new SCReturnMessage(this);
    }

    /// <summary>Field number for the "csPacketId" field.</summary>
    public const int CsPacketIdFieldNumber = 1;
    private int csPacketId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CsPacketId {
      get { return csPacketId_; }
      set {
        csPacketId_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::GameMessage.ReturnResult result_ = global::GameMessage.ReturnResult.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMessage.ReturnResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCReturnMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCReturnMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CsPacketId != other.CsPacketId) return false;
      if (Result != other.Result) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CsPacketId != 0) hash ^= CsPacketId.GetHashCode();
      if (Result != global::GameMessage.ReturnResult.None) hash ^= Result.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CsPacketId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CsPacketId);
      }
      if (Result != global::GameMessage.ReturnResult.None) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Result);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CsPacketId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CsPacketId);
      }
      if (Result != global::GameMessage.ReturnResult.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCReturnMessage other) {
      if (other == null) {
        return;
      }
      if (other.CsPacketId != 0) {
        CsPacketId = other.CsPacketId;
      }
      if (other.Result != global::GameMessage.ReturnResult.None) {
        Result = other.Result;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CsPacketId = input.ReadInt32();
            break;
          }
          case 16: {
            Result = (global::GameMessage.ReturnResult) input.ReadEnum();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
