// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: GameMessage.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GameMessage {

  /// <summary>Holder for reflection information generated from GameMessage.proto</summary>
  public static partial class GameMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for GameMessage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFHYW1lTWVzc2FnZS5wcm90bxILR2FtZU1lc3NhZ2UiRwoKQ1NKb2luR2Ft",
            "ZRIQCgh1c2VyTmFtZRgBIAEoCRInCghnYW1lVHlwZRgCIAEoDjIVLkdhbWVN",
            "ZXNzYWdlLkdhbWVUeXBlIh8KC0NTU3RvcE1hdGNoEhAKCHVzZXJOYW1lGAEg",
            "ASgJIh0KCUNTT3BlbktjcBIQCghrY3BJcEVuZBgBIAEoCSIdCglTQ09wZW5L",
            "Y3ASEAoIa2NwSXBFbmQYASABKAkieQoPU0NTdGFydExvYWRHYW1lEhQKDG9w",
            "cG9uZW50TmFtZRgBIAEoCRInCghnYW1lVHlwZRgCIAEoDjIVLkdhbWVNZXNz",
            "YWdlLkdhbWVUeXBlEhMKC2lzRmlyc3RNb3ZlGAMgASgIEhIKCnJhbmRvbVNl",
            "ZWQYBCABKAUiFAoSQ1NMb2FkR2FtZUNvbXBsZXRlIg0KC1NDR2FtZVN0YXJ0",
            "IjsKEENTR2FtZVJlc3VsdFBhY2sSJwoGcmVzdWx0GAEgASgOMhcuR2FtZU1l",
            "c3NhZ2UuR2FtZVJlc3VsdCI7ChBTQ0dhbWVSZXN1bHRQYWNrEicKBnJlc3Vs",
            "dBgBIAEoDjIXLkdhbWVNZXNzYWdlLkdhbWVSZXN1bHQqYwoIR2FtZVR5cGUS",
            "EQoNR2FtZVR5cGVfTm9uZRAAEg4KCkZhbmN5TWF0Y2gQARIPCgtGYW5jeUZy",
            "aWVuZBACEhAKDFNub29rZXJNYXRjaBADEhEKDVNub29rZXJGcmllbmQQBCo6",
            "CgpHYW1lUmVzdWx0EhMKD0dhbWVSZXN1bHRfTm9uZRAAEgsKB1ZpY3RvcnkQ",
            "ARIKCgZEZWZlYXQQAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::GameMessage.GameType), typeof(global::GameMessage.GameResult), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.CSJoinGame), global::GameMessage.CSJoinGame.Parser, new[]{ "UserName", "GameType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.CSStopMatch), global::GameMessage.CSStopMatch.Parser, new[]{ "UserName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.CSOpenKcp), global::GameMessage.CSOpenKcp.Parser, new[]{ "KcpIpEnd" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.SCOpenKcp), global::GameMessage.SCOpenKcp.Parser, new[]{ "KcpIpEnd" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.SCStartLoadGame), global::GameMessage.SCStartLoadGame.Parser, new[]{ "OpponentName", "GameType", "IsFirstMove", "RandomSeed" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.CSLoadGameComplete), global::GameMessage.CSLoadGameComplete.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.SCGameStart), global::GameMessage.SCGameStart.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.CSGameResultPack), global::GameMessage.CSGameResultPack.Parser, new[]{ "Result" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.SCGameResultPack), global::GameMessage.SCGameResultPack.Parser, new[]{ "Result" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum GameType {
    [pbr::OriginalName("GameType_None")] None = 0,
    [pbr::OriginalName("FancyMatch")] FancyMatch = 1,
    [pbr::OriginalName("FancyFriend")] FancyFriend = 2,
    [pbr::OriginalName("SnookerMatch")] SnookerMatch = 3,
    [pbr::OriginalName("SnookerFriend")] SnookerFriend = 4,
  }

  public enum GameResult {
    [pbr::OriginalName("GameResult_None")] None = 0,
    [pbr::OriginalName("Victory")] Victory = 1,
    [pbr::OriginalName("Defeat")] Defeat = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  ///加入游戏
  /// </summary>
  public sealed partial class CSJoinGame : pb::IMessage<CSJoinGame> {
    private static readonly pb::MessageParser<CSJoinGame> _parser = new pb::MessageParser<CSJoinGame>(() => new CSJoinGame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSJoinGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.GameMessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSJoinGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSJoinGame(CSJoinGame other) : this() {
      userName_ = other.userName_;
      gameType_ = other.gameType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSJoinGame Clone() {
      return new CSJoinGame(this);
    }

    /// <summary>Field number for the "userName" field.</summary>
    public const int UserNameFieldNumber = 1;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gameType" field.</summary>
    public const int GameTypeFieldNumber = 2;
    private global::GameMessage.GameType gameType_ = global::GameMessage.GameType.None;
    /// <summary>
    ///请用'|'来进行分隔
    ///string kcpIpEnd=3;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMessage.GameType GameType {
      get { return gameType_; }
      set {
        gameType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSJoinGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSJoinGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserName != other.UserName) return false;
      if (GameType != other.GameType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (GameType != global::GameMessage.GameType.None) hash ^= GameType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserName);
      }
      if (GameType != global::GameMessage.GameType.None) {
        output.WriteRawTag(16);
        output.WriteEnum((int) GameType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (GameType != global::GameMessage.GameType.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GameType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSJoinGame other) {
      if (other == null) {
        return;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.GameType != global::GameMessage.GameType.None) {
        GameType = other.GameType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserName = input.ReadString();
            break;
          }
          case 16: {
            GameType = (global::GameMessage.GameType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CSStopMatch : pb::IMessage<CSStopMatch> {
    private static readonly pb::MessageParser<CSStopMatch> _parser = new pb::MessageParser<CSStopMatch>(() => new CSStopMatch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSStopMatch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.GameMessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSStopMatch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSStopMatch(CSStopMatch other) : this() {
      userName_ = other.userName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSStopMatch Clone() {
      return new CSStopMatch(this);
    }

    /// <summary>Field number for the "userName" field.</summary>
    public const int UserNameFieldNumber = 1;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSStopMatch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSStopMatch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserName != other.UserName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSStopMatch other) {
      if (other == null) {
        return;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///--------------新加入的
  ///开启KCP
  /// </summary>
  public sealed partial class CSOpenKcp : pb::IMessage<CSOpenKcp> {
    private static readonly pb::MessageParser<CSOpenKcp> _parser = new pb::MessageParser<CSOpenKcp>(() => new CSOpenKcp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSOpenKcp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.GameMessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOpenKcp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOpenKcp(CSOpenKcp other) : this() {
      kcpIpEnd_ = other.kcpIpEnd_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOpenKcp Clone() {
      return new CSOpenKcp(this);
    }

    /// <summary>Field number for the "kcpIpEnd" field.</summary>
    public const int KcpIpEndFieldNumber = 1;
    private string kcpIpEnd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KcpIpEnd {
      get { return kcpIpEnd_; }
      set {
        kcpIpEnd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSOpenKcp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSOpenKcp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KcpIpEnd != other.KcpIpEnd) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (KcpIpEnd.Length != 0) hash ^= KcpIpEnd.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (KcpIpEnd.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(KcpIpEnd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KcpIpEnd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KcpIpEnd);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSOpenKcp other) {
      if (other == null) {
        return;
      }
      if (other.KcpIpEnd.Length != 0) {
        KcpIpEnd = other.KcpIpEnd;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            KcpIpEnd = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SCOpenKcp : pb::IMessage<SCOpenKcp> {
    private static readonly pb::MessageParser<SCOpenKcp> _parser = new pb::MessageParser<SCOpenKcp>(() => new SCOpenKcp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCOpenKcp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.GameMessageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOpenKcp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOpenKcp(SCOpenKcp other) : this() {
      kcpIpEnd_ = other.kcpIpEnd_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOpenKcp Clone() {
      return new SCOpenKcp(this);
    }

    /// <summary>Field number for the "kcpIpEnd" field.</summary>
    public const int KcpIpEndFieldNumber = 1;
    private string kcpIpEnd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KcpIpEnd {
      get { return kcpIpEnd_; }
      set {
        kcpIpEnd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCOpenKcp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCOpenKcp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KcpIpEnd != other.KcpIpEnd) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (KcpIpEnd.Length != 0) hash ^= KcpIpEnd.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (KcpIpEnd.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(KcpIpEnd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KcpIpEnd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KcpIpEnd);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCOpenKcp other) {
      if (other == null) {
        return;
      }
      if (other.KcpIpEnd.Length != 0) {
        KcpIpEnd = other.KcpIpEnd;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            KcpIpEnd = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SCStartLoadGame : pb::IMessage<SCStartLoadGame> {
    private static readonly pb::MessageParser<SCStartLoadGame> _parser = new pb::MessageParser<SCStartLoadGame>(() => new SCStartLoadGame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCStartLoadGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.GameMessageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCStartLoadGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCStartLoadGame(SCStartLoadGame other) : this() {
      opponentName_ = other.opponentName_;
      gameType_ = other.gameType_;
      isFirstMove_ = other.isFirstMove_;
      randomSeed_ = other.randomSeed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCStartLoadGame Clone() {
      return new SCStartLoadGame(this);
    }

    /// <summary>Field number for the "opponentName" field.</summary>
    public const int OpponentNameFieldNumber = 1;
    private string opponentName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OpponentName {
      get { return opponentName_; }
      set {
        opponentName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gameType" field.</summary>
    public const int GameTypeFieldNumber = 2;
    private global::GameMessage.GameType gameType_ = global::GameMessage.GameType.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMessage.GameType GameType {
      get { return gameType_; }
      set {
        gameType_ = value;
      }
    }

    /// <summary>Field number for the "isFirstMove" field.</summary>
    public const int IsFirstMoveFieldNumber = 3;
    private bool isFirstMove_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFirstMove {
      get { return isFirstMove_; }
      set {
        isFirstMove_ = value;
      }
    }

    /// <summary>Field number for the "randomSeed" field.</summary>
    public const int RandomSeedFieldNumber = 4;
    private int randomSeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RandomSeed {
      get { return randomSeed_; }
      set {
        randomSeed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCStartLoadGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCStartLoadGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OpponentName != other.OpponentName) return false;
      if (GameType != other.GameType) return false;
      if (IsFirstMove != other.IsFirstMove) return false;
      if (RandomSeed != other.RandomSeed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OpponentName.Length != 0) hash ^= OpponentName.GetHashCode();
      if (GameType != global::GameMessage.GameType.None) hash ^= GameType.GetHashCode();
      if (IsFirstMove != false) hash ^= IsFirstMove.GetHashCode();
      if (RandomSeed != 0) hash ^= RandomSeed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OpponentName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OpponentName);
      }
      if (GameType != global::GameMessage.GameType.None) {
        output.WriteRawTag(16);
        output.WriteEnum((int) GameType);
      }
      if (IsFirstMove != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsFirstMove);
      }
      if (RandomSeed != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RandomSeed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OpponentName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OpponentName);
      }
      if (GameType != global::GameMessage.GameType.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GameType);
      }
      if (IsFirstMove != false) {
        size += 1 + 1;
      }
      if (RandomSeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RandomSeed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCStartLoadGame other) {
      if (other == null) {
        return;
      }
      if (other.OpponentName.Length != 0) {
        OpponentName = other.OpponentName;
      }
      if (other.GameType != global::GameMessage.GameType.None) {
        GameType = other.GameType;
      }
      if (other.IsFirstMove != false) {
        IsFirstMove = other.IsFirstMove;
      }
      if (other.RandomSeed != 0) {
        RandomSeed = other.RandomSeed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            OpponentName = input.ReadString();
            break;
          }
          case 16: {
            GameType = (global::GameMessage.GameType) input.ReadEnum();
            break;
          }
          case 24: {
            IsFirstMove = input.ReadBool();
            break;
          }
          case 32: {
            RandomSeed = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CSLoadGameComplete : pb::IMessage<CSLoadGameComplete> {
    private static readonly pb::MessageParser<CSLoadGameComplete> _parser = new pb::MessageParser<CSLoadGameComplete>(() => new CSLoadGameComplete());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSLoadGameComplete> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.GameMessageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLoadGameComplete() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLoadGameComplete(CSLoadGameComplete other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLoadGameComplete Clone() {
      return new CSLoadGameComplete(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSLoadGameComplete);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSLoadGameComplete other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSLoadGameComplete other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class SCGameStart : pb::IMessage<SCGameStart> {
    private static readonly pb::MessageParser<SCGameStart> _parser = new pb::MessageParser<SCGameStart>(() => new SCGameStart());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCGameStart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.GameMessageReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGameStart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGameStart(SCGameStart other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGameStart Clone() {
      return new SCGameStart(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCGameStart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCGameStart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCGameStart other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class CSGameResultPack : pb::IMessage<CSGameResultPack> {
    private static readonly pb::MessageParser<CSGameResultPack> _parser = new pb::MessageParser<CSGameResultPack>(() => new CSGameResultPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSGameResultPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.GameMessageReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGameResultPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGameResultPack(CSGameResultPack other) : this() {
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGameResultPack Clone() {
      return new CSGameResultPack(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::GameMessage.GameResult result_ = global::GameMessage.GameResult.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMessage.GameResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSGameResultPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSGameResultPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != global::GameMessage.GameResult.None) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != global::GameMessage.GameResult.None) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != global::GameMessage.GameResult.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSGameResultPack other) {
      if (other == null) {
        return;
      }
      if (other.Result != global::GameMessage.GameResult.None) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = (global::GameMessage.GameResult) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SCGameResultPack : pb::IMessage<SCGameResultPack> {
    private static readonly pb::MessageParser<SCGameResultPack> _parser = new pb::MessageParser<SCGameResultPack>(() => new SCGameResultPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCGameResultPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.GameMessageReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGameResultPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGameResultPack(SCGameResultPack other) : this() {
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGameResultPack Clone() {
      return new SCGameResultPack(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::GameMessage.GameResult result_ = global::GameMessage.GameResult.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMessage.GameResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCGameResultPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCGameResultPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != global::GameMessage.GameResult.None) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != global::GameMessage.GameResult.None) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != global::GameMessage.GameResult.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCGameResultPack other) {
      if (other == null) {
        return;
      }
      if (other.Result != global::GameMessage.GameResult.None) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = (global::GameMessage.GameResult) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
