// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: FriendMessage.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GameMessage {

  /// <summary>Holder for reflection information generated from FriendMessage.proto</summary>
  public static partial class FriendMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for FriendMessage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FriendMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNGcmllbmRNZXNzYWdlLnByb3RvEgtHYW1lTWVzc2FnZSLDAQoNUGxheWVy",
            "TWVzc2FnZRIQCgh1c2VybmFtZRgBIAEoCRIQCghuaWNrTmFtZRgCIAEoCRIT",
            "CgtkZXNjcmlwdGlvbhgDIAEoCRIOCgZib2R5SWQYBCABKAUSDgoGaGFpcklk",
            "GAUgASgFEg0KBWtpdElkGAYgASgFEg4KBmZhY2VJZBgHIAEoBRIPCgdpc0xv",
            "Z2luGAggASgIEikKBnN0YXR1cxgJIAEoDjIZLkdhbWVNZXNzYWdlLlBsYXll",
            "clN0YXR1cyIqChZDU0dldEZyaWVuZFJlcXVlc3RMaXN0EhAKCHVzZXJOYW1l",
            "GAEgASgJIn0KE1NDRnJpZW5kUmVxdWVzdExpc3QSNQoRcmVxdWVzdEZyaWVu",
            "ZExpc3QYASADKAsyGi5HYW1lTWVzc2FnZS5QbGF5ZXJNZXNzYWdlEi8KBnJl",
            "c3VsdBgCIAEoDjIfLkdhbWVNZXNzYWdlLkZyaWVuZEhhbmRsZVJlc3VsdCI+",
            "Cg9DU1JlcXVlc3RGcmllbmQSEwoLb3duVXNlcm5hbWUYASABKAkSFgoOdGFy",
            "Z2V0VXNlcm5hbWUYAiABKAkiWgoPU0NSZXF1ZXN0RnJpZW5kEhYKDnRhcmdl",
            "dFVzZXJOYW1lGAEgASgJEi8KBnJlc3VsdBgCIAEoDjIfLkdhbWVNZXNzYWdl",
            "LkZyaWVuZEhhbmRsZVJlc3VsdCIjCg9DU0dldEZyaWVuZExpc3QSEAoIdXNl",
            "cm5hbWUYASABKAkicwoMU0NGcmllbmRMaXN0EjIKDmZyaWVuZE1lc3NhZ2Vz",
            "GAEgAygLMhouR2FtZU1lc3NhZ2UuUGxheWVyTWVzc2FnZRIvCgZyZXN1bHQY",
            "AiABKA4yHy5HYW1lTWVzc2FnZS5GcmllbmRIYW5kbGVSZXN1bHQiUgoTU0NV",
            "cGRhdGVGcmllbmRTdGF0ZRIQCgh1c2VybmFtZRgBIAEoCRIpCgZzdGF0dXMY",
            "AiABKA4yGS5HYW1lTWVzc2FnZS5QbGF5ZXJTdGF0dXMiggEKGUNTUHJvY2Vz",
            "c2luZ0ZyaWVuZFJlcXVlc3QSEwoLb3duVXNlcm5hbWUYASABKAkSGQoRcmVx",
            "dWVzdGVyVXNlck5hbWUYAiABKAkSNQoMcmVxdWVzdFN0YXRlGAMgASgOMh8u",
            "R2FtZU1lc3NhZ2UuRnJpZW5kUmVxdWVzdFN0YXRlImcKGVNDUHJvY2Vzc2lu",
            "Z0ZyaWVuZFJlcXVlc3QSGQoRcmVxdWVzdGVyVXNlck5hbWUYASABKAkSLwoG",
            "cmVzdWx0GAIgASgOMh8uR2FtZU1lc3NhZ2UuRnJpZW5kSGFuZGxlUmVzdWx0",
            "KlUKDFBsYXllclN0YXR1cxIUChBQbGF5ZXJTdGF1c19Ob25lEAASCAoESWRs",
            "ZRABEgoKBkdhbWluZxACEgwKCE1hdGNoaW5nEAMSCwoHV2F0dGluZxAEKlEK",
            "EkZyaWVuZEhhbmRsZVJlc3VsdBIICgROb25lEAASCwoHU3VjY2VzcxABEgsK",
            "B0ZhaWx1cmUQAhIXChNSZXBlYXRBZGRpbmdGcmllbmRzEAMqNwoSRnJpZW5k",
            "UmVxdWVzdFN0YXRlEgkKBUF3YWl0EAASCgoGQWdyZWVuEAESCgoGUmVmdXNl",
            "EAJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::GameMessage.PlayerStatus), typeof(global::GameMessage.FriendHandleResult), typeof(global::GameMessage.FriendRequestState), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.PlayerMessage), global::GameMessage.PlayerMessage.Parser, new[]{ "Username", "NickName", "Description", "BodyId", "HairId", "KitId", "FaceId", "IsLogin", "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.CSGetFriendRequestList), global::GameMessage.CSGetFriendRequestList.Parser, new[]{ "UserName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.SCFriendRequestList), global::GameMessage.SCFriendRequestList.Parser, new[]{ "RequestFriendList", "Result" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.CSRequestFriend), global::GameMessage.CSRequestFriend.Parser, new[]{ "OwnUsername", "TargetUsername" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.SCRequestFriend), global::GameMessage.SCRequestFriend.Parser, new[]{ "TargetUserName", "Result" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.CSGetFriendList), global::GameMessage.CSGetFriendList.Parser, new[]{ "Username" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.SCFriendList), global::GameMessage.SCFriendList.Parser, new[]{ "FriendMessages", "Result" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.SCUpdateFriendState), global::GameMessage.SCUpdateFriendState.Parser, new[]{ "Username", "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.CSProcessingFriendRequest), global::GameMessage.CSProcessingFriendRequest.Parser, new[]{ "OwnUsername", "RequesterUserName", "RequestState" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMessage.SCProcessingFriendRequest), global::GameMessage.SCProcessingFriendRequest.Parser, new[]{ "RequesterUserName", "Result" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum PlayerStatus {
    [pbr::OriginalName("PlayerStaus_None")] PlayerStausNone = 0,
    [pbr::OriginalName("Idle")] Idle = 1,
    [pbr::OriginalName("Gaming")] Gaming = 2,
    [pbr::OriginalName("Matching")] Matching = 3,
    [pbr::OriginalName("Watting")] Watting = 4,
  }

  public enum FriendHandleResult {
    [pbr::OriginalName("None")] None = 0,
    [pbr::OriginalName("Success")] Success = 1,
    [pbr::OriginalName("Failure")] Failure = 2,
    [pbr::OriginalName("RepeatAddingFriends")] RepeatAddingFriends = 3,
  }

  public enum FriendRequestState {
    [pbr::OriginalName("Await")] Await = 0,
    [pbr::OriginalName("Agreen")] Agreen = 1,
    [pbr::OriginalName("Refuse")] Refuse = 2,
  }

  #endregion

  #region Messages
  public sealed partial class PlayerMessage : pb::IMessage<PlayerMessage> {
    private static readonly pb::MessageParser<PlayerMessage> _parser = new pb::MessageParser<PlayerMessage>(() => new PlayerMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.FriendMessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerMessage(PlayerMessage other) : this() {
      username_ = other.username_;
      nickName_ = other.nickName_;
      description_ = other.description_;
      bodyId_ = other.bodyId_;
      hairId_ = other.hairId_;
      kitId_ = other.kitId_;
      faceId_ = other.faceId_;
      isLogin_ = other.isLogin_;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerMessage Clone() {
      return new PlayerMessage(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nickName" field.</summary>
    public const int NickNameFieldNumber = 2;
    private string nickName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bodyId" field.</summary>
    public const int BodyIdFieldNumber = 4;
    private int bodyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BodyId {
      get { return bodyId_; }
      set {
        bodyId_ = value;
      }
    }

    /// <summary>Field number for the "hairId" field.</summary>
    public const int HairIdFieldNumber = 5;
    private int hairId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HairId {
      get { return hairId_; }
      set {
        hairId_ = value;
      }
    }

    /// <summary>Field number for the "kitId" field.</summary>
    public const int KitIdFieldNumber = 6;
    private int kitId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KitId {
      get { return kitId_; }
      set {
        kitId_ = value;
      }
    }

    /// <summary>Field number for the "faceId" field.</summary>
    public const int FaceIdFieldNumber = 7;
    private int faceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FaceId {
      get { return faceId_; }
      set {
        faceId_ = value;
      }
    }

    /// <summary>Field number for the "isLogin" field.</summary>
    public const int IsLoginFieldNumber = 8;
    private bool isLogin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLogin {
      get { return isLogin_; }
      set {
        isLogin_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 9;
    private global::GameMessage.PlayerStatus status_ = global::GameMessage.PlayerStatus.PlayerStausNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMessage.PlayerStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (NickName != other.NickName) return false;
      if (Description != other.Description) return false;
      if (BodyId != other.BodyId) return false;
      if (HairId != other.HairId) return false;
      if (KitId != other.KitId) return false;
      if (FaceId != other.FaceId) return false;
      if (IsLogin != other.IsLogin) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (NickName.Length != 0) hash ^= NickName.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (BodyId != 0) hash ^= BodyId.GetHashCode();
      if (HairId != 0) hash ^= HairId.GetHashCode();
      if (KitId != 0) hash ^= KitId.GetHashCode();
      if (FaceId != 0) hash ^= FaceId.GetHashCode();
      if (IsLogin != false) hash ^= IsLogin.GetHashCode();
      if (Status != global::GameMessage.PlayerStatus.PlayerStausNone) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NickName);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (BodyId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BodyId);
      }
      if (HairId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(HairId);
      }
      if (KitId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(KitId);
      }
      if (FaceId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FaceId);
      }
      if (IsLogin != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsLogin);
      }
      if (Status != global::GameMessage.PlayerStatus.PlayerStausNone) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (BodyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BodyId);
      }
      if (HairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HairId);
      }
      if (KitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KitId);
      }
      if (FaceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FaceId);
      }
      if (IsLogin != false) {
        size += 1 + 1;
      }
      if (Status != global::GameMessage.PlayerStatus.PlayerStausNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerMessage other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.NickName.Length != 0) {
        NickName = other.NickName;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.BodyId != 0) {
        BodyId = other.BodyId;
      }
      if (other.HairId != 0) {
        HairId = other.HairId;
      }
      if (other.KitId != 0) {
        KitId = other.KitId;
      }
      if (other.FaceId != 0) {
        FaceId = other.FaceId;
      }
      if (other.IsLogin != false) {
        IsLogin = other.IsLogin;
      }
      if (other.Status != global::GameMessage.PlayerStatus.PlayerStausNone) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 18: {
            NickName = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 32: {
            BodyId = input.ReadInt32();
            break;
          }
          case 40: {
            HairId = input.ReadInt32();
            break;
          }
          case 48: {
            KitId = input.ReadInt32();
            break;
          }
          case 56: {
            FaceId = input.ReadInt32();
            break;
          }
          case 64: {
            IsLogin = input.ReadBool();
            break;
          }
          case 72: {
            Status = (global::GameMessage.PlayerStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CSGetFriendRequestList : pb::IMessage<CSGetFriendRequestList> {
    private static readonly pb::MessageParser<CSGetFriendRequestList> _parser = new pb::MessageParser<CSGetFriendRequestList>(() => new CSGetFriendRequestList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSGetFriendRequestList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.FriendMessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetFriendRequestList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetFriendRequestList(CSGetFriendRequestList other) : this() {
      userName_ = other.userName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetFriendRequestList Clone() {
      return new CSGetFriendRequestList(this);
    }

    /// <summary>Field number for the "userName" field.</summary>
    public const int UserNameFieldNumber = 1;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSGetFriendRequestList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSGetFriendRequestList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserName != other.UserName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSGetFriendRequestList other) {
      if (other == null) {
        return;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SCFriendRequestList : pb::IMessage<SCFriendRequestList> {
    private static readonly pb::MessageParser<SCFriendRequestList> _parser = new pb::MessageParser<SCFriendRequestList>(() => new SCFriendRequestList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCFriendRequestList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.FriendMessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFriendRequestList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFriendRequestList(SCFriendRequestList other) : this() {
      requestFriendList_ = other.requestFriendList_.Clone();
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFriendRequestList Clone() {
      return new SCFriendRequestList(this);
    }

    /// <summary>Field number for the "requestFriendList" field.</summary>
    public const int RequestFriendListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameMessage.PlayerMessage> _repeated_requestFriendList_codec
        = pb::FieldCodec.ForMessage(10, global::GameMessage.PlayerMessage.Parser);
    private readonly pbc::RepeatedField<global::GameMessage.PlayerMessage> requestFriendList_ = new pbc::RepeatedField<global::GameMessage.PlayerMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameMessage.PlayerMessage> RequestFriendList {
      get { return requestFriendList_; }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::GameMessage.FriendHandleResult result_ = global::GameMessage.FriendHandleResult.None;
    /// <summary>
    ///防止好友列表为空的时候不发送确认包
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMessage.FriendHandleResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCFriendRequestList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCFriendRequestList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!requestFriendList_.Equals(other.requestFriendList_)) return false;
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= requestFriendList_.GetHashCode();
      if (Result != global::GameMessage.FriendHandleResult.None) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      requestFriendList_.WriteTo(output, _repeated_requestFriendList_codec);
      if (Result != global::GameMessage.FriendHandleResult.None) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += requestFriendList_.CalculateSize(_repeated_requestFriendList_codec);
      if (Result != global::GameMessage.FriendHandleResult.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCFriendRequestList other) {
      if (other == null) {
        return;
      }
      requestFriendList_.Add(other.requestFriendList_);
      if (other.Result != global::GameMessage.FriendHandleResult.None) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            requestFriendList_.AddEntriesFrom(input, _repeated_requestFriendList_codec);
            break;
          }
          case 16: {
            Result = (global::GameMessage.FriendHandleResult) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CSRequestFriend : pb::IMessage<CSRequestFriend> {
    private static readonly pb::MessageParser<CSRequestFriend> _parser = new pb::MessageParser<CSRequestFriend>(() => new CSRequestFriend());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRequestFriend> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.FriendMessageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSRequestFriend() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSRequestFriend(CSRequestFriend other) : this() {
      ownUsername_ = other.ownUsername_;
      targetUsername_ = other.targetUsername_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSRequestFriend Clone() {
      return new CSRequestFriend(this);
    }

    /// <summary>Field number for the "ownUsername" field.</summary>
    public const int OwnUsernameFieldNumber = 1;
    private string ownUsername_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OwnUsername {
      get { return ownUsername_; }
      set {
        ownUsername_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "targetUsername" field.</summary>
    public const int TargetUsernameFieldNumber = 2;
    private string targetUsername_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetUsername {
      get { return targetUsername_; }
      set {
        targetUsername_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSRequestFriend);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSRequestFriend other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OwnUsername != other.OwnUsername) return false;
      if (TargetUsername != other.TargetUsername) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OwnUsername.Length != 0) hash ^= OwnUsername.GetHashCode();
      if (TargetUsername.Length != 0) hash ^= TargetUsername.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OwnUsername.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OwnUsername);
      }
      if (TargetUsername.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TargetUsername);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OwnUsername.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnUsername);
      }
      if (TargetUsername.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetUsername);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSRequestFriend other) {
      if (other == null) {
        return;
      }
      if (other.OwnUsername.Length != 0) {
        OwnUsername = other.OwnUsername;
      }
      if (other.TargetUsername.Length != 0) {
        TargetUsername = other.TargetUsername;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            OwnUsername = input.ReadString();
            break;
          }
          case 18: {
            TargetUsername = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SCRequestFriend : pb::IMessage<SCRequestFriend> {
    private static readonly pb::MessageParser<SCRequestFriend> _parser = new pb::MessageParser<SCRequestFriend>(() => new SCRequestFriend());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCRequestFriend> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.FriendMessageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCRequestFriend() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCRequestFriend(SCRequestFriend other) : this() {
      targetUserName_ = other.targetUserName_;
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCRequestFriend Clone() {
      return new SCRequestFriend(this);
    }

    /// <summary>Field number for the "targetUserName" field.</summary>
    public const int TargetUserNameFieldNumber = 1;
    private string targetUserName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetUserName {
      get { return targetUserName_; }
      set {
        targetUserName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::GameMessage.FriendHandleResult result_ = global::GameMessage.FriendHandleResult.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMessage.FriendHandleResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCRequestFriend);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCRequestFriend other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetUserName != other.TargetUserName) return false;
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetUserName.Length != 0) hash ^= TargetUserName.GetHashCode();
      if (Result != global::GameMessage.FriendHandleResult.None) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetUserName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TargetUserName);
      }
      if (Result != global::GameMessage.FriendHandleResult.None) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetUserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetUserName);
      }
      if (Result != global::GameMessage.FriendHandleResult.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCRequestFriend other) {
      if (other == null) {
        return;
      }
      if (other.TargetUserName.Length != 0) {
        TargetUserName = other.TargetUserName;
      }
      if (other.Result != global::GameMessage.FriendHandleResult.None) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TargetUserName = input.ReadString();
            break;
          }
          case 16: {
            Result = (global::GameMessage.FriendHandleResult) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CSGetFriendList : pb::IMessage<CSGetFriendList> {
    private static readonly pb::MessageParser<CSGetFriendList> _parser = new pb::MessageParser<CSGetFriendList>(() => new CSGetFriendList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSGetFriendList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.FriendMessageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetFriendList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetFriendList(CSGetFriendList other) : this() {
      username_ = other.username_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetFriendList Clone() {
      return new CSGetFriendList(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSGetFriendList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSGetFriendList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSGetFriendList other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SCFriendList : pb::IMessage<SCFriendList> {
    private static readonly pb::MessageParser<SCFriendList> _parser = new pb::MessageParser<SCFriendList>(() => new SCFriendList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCFriendList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.FriendMessageReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFriendList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFriendList(SCFriendList other) : this() {
      friendMessages_ = other.friendMessages_.Clone();
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFriendList Clone() {
      return new SCFriendList(this);
    }

    /// <summary>Field number for the "friendMessages" field.</summary>
    public const int FriendMessagesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameMessage.PlayerMessage> _repeated_friendMessages_codec
        = pb::FieldCodec.ForMessage(10, global::GameMessage.PlayerMessage.Parser);
    private readonly pbc::RepeatedField<global::GameMessage.PlayerMessage> friendMessages_ = new pbc::RepeatedField<global::GameMessage.PlayerMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameMessage.PlayerMessage> FriendMessages {
      get { return friendMessages_; }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::GameMessage.FriendHandleResult result_ = global::GameMessage.FriendHandleResult.None;
    /// <summary>
    ///防止好友列表为空的时候不发送确认包
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMessage.FriendHandleResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCFriendList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCFriendList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!friendMessages_.Equals(other.friendMessages_)) return false;
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= friendMessages_.GetHashCode();
      if (Result != global::GameMessage.FriendHandleResult.None) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      friendMessages_.WriteTo(output, _repeated_friendMessages_codec);
      if (Result != global::GameMessage.FriendHandleResult.None) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += friendMessages_.CalculateSize(_repeated_friendMessages_codec);
      if (Result != global::GameMessage.FriendHandleResult.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCFriendList other) {
      if (other == null) {
        return;
      }
      friendMessages_.Add(other.friendMessages_);
      if (other.Result != global::GameMessage.FriendHandleResult.None) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            friendMessages_.AddEntriesFrom(input, _repeated_friendMessages_codec);
            break;
          }
          case 16: {
            Result = (global::GameMessage.FriendHandleResult) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///实时更新玩家的信息..
  /// </summary>
  public sealed partial class SCUpdateFriendState : pb::IMessage<SCUpdateFriendState> {
    private static readonly pb::MessageParser<SCUpdateFriendState> _parser = new pb::MessageParser<SCUpdateFriendState>(() => new SCUpdateFriendState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCUpdateFriendState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.FriendMessageReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUpdateFriendState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUpdateFriendState(SCUpdateFriendState other) : this() {
      username_ = other.username_;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUpdateFriendState Clone() {
      return new SCUpdateFriendState(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::GameMessage.PlayerStatus status_ = global::GameMessage.PlayerStatus.PlayerStausNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMessage.PlayerStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCUpdateFriendState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCUpdateFriendState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Status != global::GameMessage.PlayerStatus.PlayerStausNone) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (Status != global::GameMessage.PlayerStatus.PlayerStausNone) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Status != global::GameMessage.PlayerStatus.PlayerStausNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCUpdateFriendState other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Status != global::GameMessage.PlayerStatus.PlayerStausNone) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 16: {
            Status = (global::GameMessage.PlayerStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CSProcessingFriendRequest : pb::IMessage<CSProcessingFriendRequest> {
    private static readonly pb::MessageParser<CSProcessingFriendRequest> _parser = new pb::MessageParser<CSProcessingFriendRequest>(() => new CSProcessingFriendRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSProcessingFriendRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.FriendMessageReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSProcessingFriendRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSProcessingFriendRequest(CSProcessingFriendRequest other) : this() {
      ownUsername_ = other.ownUsername_;
      requesterUserName_ = other.requesterUserName_;
      requestState_ = other.requestState_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSProcessingFriendRequest Clone() {
      return new CSProcessingFriendRequest(this);
    }

    /// <summary>Field number for the "ownUsername" field.</summary>
    public const int OwnUsernameFieldNumber = 1;
    private string ownUsername_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OwnUsername {
      get { return ownUsername_; }
      set {
        ownUsername_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "requesterUserName" field.</summary>
    public const int RequesterUserNameFieldNumber = 2;
    private string requesterUserName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequesterUserName {
      get { return requesterUserName_; }
      set {
        requesterUserName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "requestState" field.</summary>
    public const int RequestStateFieldNumber = 3;
    private global::GameMessage.FriendRequestState requestState_ = global::GameMessage.FriendRequestState.Await;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMessage.FriendRequestState RequestState {
      get { return requestState_; }
      set {
        requestState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSProcessingFriendRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSProcessingFriendRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OwnUsername != other.OwnUsername) return false;
      if (RequesterUserName != other.RequesterUserName) return false;
      if (RequestState != other.RequestState) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OwnUsername.Length != 0) hash ^= OwnUsername.GetHashCode();
      if (RequesterUserName.Length != 0) hash ^= RequesterUserName.GetHashCode();
      if (RequestState != global::GameMessage.FriendRequestState.Await) hash ^= RequestState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OwnUsername.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OwnUsername);
      }
      if (RequesterUserName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RequesterUserName);
      }
      if (RequestState != global::GameMessage.FriendRequestState.Await) {
        output.WriteRawTag(24);
        output.WriteEnum((int) RequestState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OwnUsername.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnUsername);
      }
      if (RequesterUserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequesterUserName);
      }
      if (RequestState != global::GameMessage.FriendRequestState.Await) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RequestState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSProcessingFriendRequest other) {
      if (other == null) {
        return;
      }
      if (other.OwnUsername.Length != 0) {
        OwnUsername = other.OwnUsername;
      }
      if (other.RequesterUserName.Length != 0) {
        RequesterUserName = other.RequesterUserName;
      }
      if (other.RequestState != global::GameMessage.FriendRequestState.Await) {
        RequestState = other.RequestState;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            OwnUsername = input.ReadString();
            break;
          }
          case 18: {
            RequesterUserName = input.ReadString();
            break;
          }
          case 24: {
            RequestState = (global::GameMessage.FriendRequestState) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SCProcessingFriendRequest : pb::IMessage<SCProcessingFriendRequest> {
    private static readonly pb::MessageParser<SCProcessingFriendRequest> _parser = new pb::MessageParser<SCProcessingFriendRequest>(() => new SCProcessingFriendRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCProcessingFriendRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMessage.FriendMessageReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCProcessingFriendRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCProcessingFriendRequest(SCProcessingFriendRequest other) : this() {
      requesterUserName_ = other.requesterUserName_;
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCProcessingFriendRequest Clone() {
      return new SCProcessingFriendRequest(this);
    }

    /// <summary>Field number for the "requesterUserName" field.</summary>
    public const int RequesterUserNameFieldNumber = 1;
    private string requesterUserName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequesterUserName {
      get { return requesterUserName_; }
      set {
        requesterUserName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::GameMessage.FriendHandleResult result_ = global::GameMessage.FriendHandleResult.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMessage.FriendHandleResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCProcessingFriendRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCProcessingFriendRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequesterUserName != other.RequesterUserName) return false;
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequesterUserName.Length != 0) hash ^= RequesterUserName.GetHashCode();
      if (Result != global::GameMessage.FriendHandleResult.None) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequesterUserName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RequesterUserName);
      }
      if (Result != global::GameMessage.FriendHandleResult.None) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequesterUserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequesterUserName);
      }
      if (Result != global::GameMessage.FriendHandleResult.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCProcessingFriendRequest other) {
      if (other == null) {
        return;
      }
      if (other.RequesterUserName.Length != 0) {
        RequesterUserName = other.RequesterUserName;
      }
      if (other.Result != global::GameMessage.FriendHandleResult.None) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RequesterUserName = input.ReadString();
            break;
          }
          case 16: {
            Result = (global::GameMessage.FriendHandleResult) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
